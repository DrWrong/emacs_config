;; Object biz/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "biz/"
  :tables
  (list
    (semanticdb-table "partition_manager.py"
      :major-mode 'python-mode
      :tags 
        '( ("threading" include nil nil [26 42])
            ("time" include nil nil [43 54])
            ("logging" include nil nil [55 69])
            ("django.conf" include nil nil [70 88])
            ("django.db" include nil nil [89 105])
            ("datetime" include nil nil [106 121])
            ("PartitionManagerThread" type
               (:documentation "管理数据表的分区，包括创建新分区，删除旧数据
    每天凌晨1点运行，创建对应明天数据的新分区，删除过期数据
    "
                :superclasses ("threading.Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Args:
            output_interval: 统计信息输出时间间隔，默认是600秒
        \"\"\"" code nil (reparse-symbol indented_block_body) [301 378])
                            ("threading" code nil (reparse-symbol indented_block_body) [387 435])
                            ("self" variable nil (reparse-symbol indented_block_body) [445 515])
                            ("self" variable nil (reparse-symbol indented_block_body) [524 625])
                            ("self" variable nil (reparse-symbol indented_block_body) [634 663])
                            ("self" variable nil (reparse-symbol indented_block_body) [672 701])
                            ("self" variable nil (reparse-symbol indented_block_body) [710 744])
                            ("self" variable nil (reparse-symbol indented_block_body) [753 788])
                            ("self" variable nil (reparse-symbol indented_block_body) [797 844])
                            ("self" code nil (reparse-symbol indented_block_body) [853 934]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [261 265])
                            ("config" variable nil (reparse-symbol function_parameters) [267 273])
                            ("args" variable nil (reparse-symbol function_parameters) [275 280])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [282 290]))                          
                        :documentation "
        Args:
            output_interval: 统计信息输出时间间隔，默认是600秒
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [248 935])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [948 952]))                          )
                        (reparse-symbol indented_block_body) [940 2307])
                    ("sleep_to_one" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2329 2333])
                            ("now" variable nil (reparse-symbol function_parameters) [2335 2338]))                          
                        :documentation "睡到明天凌晨1点

        Args:
         now - int 当前时间的时间戳
        ")
                        (reparse-symbol indented_block_body) [2312 2686])
                    ("check_partition_exists" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2718 2722])
                            ("pname" variable nil (reparse-symbol function_parameters) [2724 2729])
                            ("tb" variable nil (reparse-symbol function_parameters) [2731 2733]))                          
                        :documentation "检查一个分区是不是存在

        Args:
         pname - str 分区的名字
        Returns:
         bool - 存在返回True，否则False
        ")
                        (reparse-symbol indented_block_body) [2691 3374])
                    ("add_partition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3397 3401])
                            ("pname" variable nil (reparse-symbol function_parameters) [3403 3408])
                            ("dt" variable nil (reparse-symbol function_parameters) [3410 3412])
                            ("tb" variable nil (reparse-symbol function_parameters) [3414 3416]))                          
                        :documentation "增加某一天的分区

        Args:
         pname - str 分区名称
         dt - int 日期
        ")
                        (reparse-symbol indented_block_body) [3379 3739])
                    ("check_partition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3764 3768])
                            ("now" variable nil (reparse-symbol function_parameters) [3770 3773])
                            ("tb" variable nil (reparse-symbol function_parameters) [3775 3777]))                          
                        :documentation "创建新分区

        Args:
         now - int 当前时间的时间戳
        ")
                        (reparse-symbol indented_block_body) [3744 4275])
                    ("delete_old_partition" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4305 4309])
                            ("now" variable nil (reparse-symbol function_parameters) [4311 4314])
                            ("tb" variable nil (reparse-symbol function_parameters) [4316 4318]))                          )
                        (reparse-symbol indented_block_body) [4280 4828]))                  
                :type "class")
                nil [124 4828]))          
      :file "partition_manager.py"
      :pointmax 4828
      :fsize 5331
      :lastmodtime '(22684 7419 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "statistics_thread.py"
      :major-mode 'python-mode
      :tags 
        '( ("copy" include nil nil [26 37])
            ("logging" include nil nil [38 52])
            ("threading" include nil nil [53 69])
            ("time" include nil nil [70 81])
            ("domob_pyutils.statscol" include nil nil [83 123])
            ("StatisticsThread" type
               (:documentation "专门负责统计信息

    每小时统计和每天的统计，将统计信息记录到日志中

    统计保存到数据库的错误率，如果超过一定阈值，记录错误日志用于报警
    "
                :superclasses ("threading.Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Args:
            output_interval: 统计信息输出时间间隔，默认是600秒
        \"\"\"" code nil (reparse-symbol indented_block_body) [340 417])
                            ("threading" code nil (reparse-symbol indented_block_body) [426 474])
                            ("self" variable nil (reparse-symbol indented_block_body) [483 523])
                            ("self" variable nil (reparse-symbol indented_block_body) [533 584])
                            ("self" variable nil (reparse-symbol indented_block_body) [593 658])
                            ("self" variable nil (reparse-symbol indented_block_body) [667 724]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [277 281])
                            ("config" variable nil (reparse-symbol function_parameters) [283 289])
                            ("t_output_interval" variable nil (reparse-symbol function_parameters) [291 308])
                            ("args" variable nil (reparse-symbol function_parameters) [314 319])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [321 329]))                          
                        :documentation "
        Args:
            output_interval: 统计信息输出时间间隔，默认是600秒
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [264 725])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [738 742]))                          
                        :documentation "
        ")
                        (reparse-symbol indented_block_body) [730 2093])
                    ("output_stat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2114 2118])
                            ("old_stat" variable nil (reparse-symbol function_parameters) [2120 2128])
                            ("new_stat" variable nil (reparse-symbol function_parameters) [2130 2138])
                            ("warn_on" variable nil (reparse-symbol function_parameters) [2140 2147]))                          
                        :documentation "输出统计信息
        Args:
            old_stat:上一个统计时间点的统计信息，是一个字典
            new_stat：新的时间的统计信息
        ")
                        (reparse-symbol indented_block_body) [2098 3294]))                  
                :type "class")
                nil [126 3294]))          
      :file "statistics_thread.py"
      :pointmax 3294
      :fsize 3675
      :lastmodtime '(22684 7419 0 0)
      :unmatched-syntax '((NAME 2482 . 2491) (IF 2496 . 2498) (ELSE 2519 . 2523)))
    (semanticdb-table "workers.py"
      :major-mode 'python-mode
      :tags 
        '( ("django.db" include nil nil [26 42])
            ("logging" include nil nil [43 57])
            ("threading" include nil nil [58 74])
            ("sys" include nil nil [75 85])
            ("time" include nil nil [86 97])
            ("thrift.transport" include nil nil [98 137])
            ("thrift.protocol" include nil nil [138 181])
            ("thrift" include nil nil [182 215])
            ("domob_pyutils.statscol" include nil nil [217 257])
            ("domob_thrift.inf.sahara.logtailer_types.ttypes" include nil nil [258 324])
            ("domob_thrift.aow_stat_types2.ttypes" include nil nil [325 381])
            ("ut" include nil nil [382 406])
            ("ut" include nil nil [407 430])
            ("MessageReader" type
               (:documentation "从标准输入读取thrift数据，生成结构体"
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Args:
         dataClass - thrift对象的类型
        \"\"\"" code nil (reparse-symbol indented_block_body) [535 597])
                            ("self" variable nil (reparse-symbol indented_block_body) [606 653])
                            ("self" variable nil (reparse-symbol indented_block_body) [662 682]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [512 516])
                            ("nowrap" variable nil (reparse-symbol function_parameters) [518 524]))                          
                        :documentation "
        Args:
         dataClass - thrift对象的类型
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [499 683])
                    ("readMessage" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [704 708]))                          
                        :documentation "读取标准输入，解析thrift对象

        在logtailer运行模式，启用了对thrift对象的封装，需要用Message对象解封装
        在测试时，可能直接发送监控信息，因此程序通过一个命令行参数支持这两种模式
        ")
                        (reparse-symbol indented_block_body) [688 1791]))                  
                :type "class")
                nil [433 1791])
            ("WorkerThread" type
               (:documentation "从queue中获取数据，入库"
                :superclasses ("threading.Thread")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"
        Args:
          config - 配置项
          queue - 获取待入库记录的队列
          fail_queue - 将失败的记录放入到这个队列中
        \"\"\"" code nil (reparse-symbol indented_block_body) [1914 2033])
                            ("threading" code nil (reparse-symbol indented_block_body) [2042 2083])
                            ("self" variable nil (reparse-symbol indented_block_body) [2092 2156])
                            ("self" variable nil (reparse-symbol indented_block_body) [2165 2185])
                            ("self" variable nil (reparse-symbol indented_block_body) [2194 2212])
                            ("self" variable nil (reparse-symbol indented_block_body) [2221 2256])
                            ("self" variable nil (reparse-symbol indented_block_body) [2265 2364]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1874 1878])
                            ("config" variable nil (reparse-symbol function_parameters) [1880 1886])
                            ("queue" variable nil (reparse-symbol function_parameters) [1888 1893])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [1895 1903]))                          
                        :documentation "
        Args:
          config - 配置项
          queue - 获取待入库记录的队列
          fail_queue - 将失败的记录放入到这个队列中
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1861 2365])
                    ("run" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2378 2382]))                          )
                        (reparse-symbol indented_block_body) [2370 2519])
                    ("process_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2541 2545])
                            ("data" variable nil (reparse-symbol function_parameters) [2547 2551]))                          )
                        (reparse-symbol indented_block_body) [2524 2852])
                    ("saveRecord" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2872 2876])
                            ("data" variable nil (reparse-symbol function_parameters) [2878 2882]))                          
                        :documentation "保存一条数据到数据库
        如果保存失败，会进行几次重试
        Args:
          data - 点击或者激活数据
        Returns:
          bool - 成功返回True，否则返回False
        ")
                        (reparse-symbol indented_block_body) [2857 3725]))                  
                :type "class")
                nil [1793 3725]))          
      :file "workers.py"
      :pointmax 3725
      :fsize 4128
      :lastmodtime '(22726 5237 0 0)
      :unmatched-syntax '((INDENT_BLOCK 3671 . 3692) (INDENT_BLOCK 3447 . 3671) (INDENT_BLOCK 3387 . 3447)))
    (semanticdb-table "__init__.py"
      :major-mode 'python-mode
      :tags nil
      :file "__init__.py"
      :pointmax 1
      :fsize 0
      :lastmodtime '(22684 7419 0 0)
      :unmatched-syntax nil))
  :file "!Users!drwrong!mywork!domob!aow_project!aow_kafaka_db!lib!biz!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
